{"version":3,"sources":["components/Container/index.js","components/TableHead/index.js","components/Functions/compare.js","components/Functions/compareLocation.js","components/Functions/compareOccupation.js","components/CardBtn/index.js","components/pages/Employee.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","TableHead","scope","compare","a","b","nameA","name","toUpperCase","nameB","comparison","location","occupation","CardBtn","onClick","Employee","useState","employeeName","setEmployeeName","employeeId","setEmployeeId","employeeOccupation","setEmployeeOccupation","employeeLocation","setEmployeeLocation","employeeColor","setEmployeeColor","setEmployeeInfo","value","map","o","key","id","color","filterByColor","friends","filter","useEffect","e","sort","compareLocation","compareOccupation","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.522f862e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction TableHead() {\n  return  (\n    <thead>\n      <tr>\n        <th scope=\"col\">ID</th>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\">Occupation</th>\n        <th scope=\"col\">Location</th>\n        <th scope=\"col\">Color</th>\n      </tr>\n    </thead>\n  );\n}\n\nexport default TableHead;\n","export default     function compare(a, b) {\r\n    const nameA = a.name.toUpperCase();\r\n    const nameB = b.name.toUpperCase();\r\n  \r\n    let comparison = 0;\r\n    if (nameA > nameB) {\r\n      comparison = 1;\r\n    } else if (nameA < nameB) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n","export default     function compare(a, b) {\r\n    const nameA = a.location.toUpperCase();\r\n    const nameB = b.location.toUpperCase();\r\n  \r\n    let comparison = 0;\r\n    if (nameA > nameB) {\r\n      comparison = 1;\r\n    } else if (nameA < nameB) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n","export default     function compare(a, b) {\r\n    const nameA = a.occupation.toUpperCase();\r\n    const nameB = b.occupation.toUpperCase();\r\n  \r\n    let comparison = 0;\r\n    if (nameA > nameB) {\r\n      comparison = 1;\r\n    } else if (nameA < nameB) {\r\n      comparison = -1;\r\n    }\r\n    return comparison;\r\n}\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction CardBtn(props) {\n  return (\n    <button onClick={props.onClick} {...props} />\n  );\n}\n\nexport default CardBtn;\n","import React, { useState, useEffect } from \"react\";\r\nimport friends from \"../../friends.json\";\r\nimport Container from \"../Container/index\";\r\nimport TableHead from \"../TableHead/index\";\r\nimport compare from \"../Functions/compare\";\r\nimport compareLocation from \"../Functions/compareLocation\";\r\nimport compareOccupation from \"../Functions/compareOccupation\";\r\nimport CardBtn from \"../CardBtn/index\"\r\n\r\nexport default function Employee() {\r\n    const [employeeName, setEmployeeName] = useState('');\r\n    const [employeeId, setEmployeeId] = useState('');\r\n    const [employeeOccupation, setEmployeeOccupation] = useState('');\r\n    const [employeeLocation, setEmployeeLocation] = useState('');\r\n    const [employeeColor, setEmployeeColor] = useState('');\r\n\r\n    function setEmployeeInfo(value) {\r\n        setEmployeeName(value.map(o => <p key={o.id}>{o.name}</p>))\r\n        setEmployeeId(value.map(o => <p key={o.id}>{o.id}</p>))\r\n        setEmployeeOccupation(value.map(o => <p key={o.id}>{o.occupation}</p>))\r\n        setEmployeeLocation(value.map(o => <p key={o.id}>{o.location}</p>))\r\n        setEmployeeColor(value.map(o => <p key={o.id}>{o.color}</p>))\r\n    }\r\n\r\n    useEffect(() => {\r\n        setEmployeeInfo(friends);\r\n      }, []);\r\n\r\n    function loadAllEmployee() {\r\n        setEmployeeInfo(friends);\r\n    }\r\n\r\n    function filterByColor(value) {\r\n        let selectedColor = friends.filter(o => o.color === value);\r\n        setEmployeeInfo(selectedColor);\r\n    }\r\n\r\n    function sortByName() {\r\n       let newListName = friends.sort(compare);\r\n       setEmployeeInfo(newListName);\r\n    }\r\n\r\n    function sortByLocation() {\r\n        let newListLocation = friends.sort(compareLocation);\r\n        setEmployeeInfo(newListLocation);\r\n    }\r\n\r\n    function sortByOccupation() {\r\n        let newListOccupation = friends.sort(compareOccupation);\r\n        setEmployeeInfo(newListOccupation);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n            <h1 className=\"title\">Employee Directory</h1>\r\n            <CardBtn className=\"btn btn-info\" onClick={e => loadAllEmployee()}> Show All </CardBtn>\r\n            <CardBtn className=\"btn btn-warning\" onClick={e => sortByName()}> Sort By Name </CardBtn>\r\n            <CardBtn className=\"btn btn-warning\" onClick={e => sortByLocation()}> Sort By Location </CardBtn>\r\n            <CardBtn className=\"btn btn-warning\" onClick={e => sortByOccupation()}> Sort By Occupation </CardBtn>\r\n            <CardBtn className=\"btn btn-danger\" onClick={e => filterByColor(\"red\")}> Filter Red </CardBtn>\r\n            <CardBtn className=\"btn btn-primary\" onClick={e => filterByColor(\"blue\")}> Filter Blue </CardBtn>\r\n            <CardBtn className=\"btn btn-success\" onClick={e => filterByColor(\"green\")}> Filter Green </CardBtn>\r\n            <table className=\"table table-dark table-bordered\">\r\n            <TableHead />\r\n            <tbody>\r\n                <tr>\r\n                    <th scope=\"col\" key={employeeId}>{employeeId}</th>\r\n                    <th scope=\"col\">{employeeName}</th>\r\n                    <th scope=\"col\">{employeeOccupation}</th>\r\n                    <th scope=\"col\">{employeeLocation}</th>\r\n                    <th scope=\"col\">{employeeColor}</th>\r\n                </tr>\r\n            </tbody>\r\n            </table>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport './App.css';\nimport Employee from'./components/pages/Employee'\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Employee} />\n      </div>\n    </Router>\n  );\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}